define(["ko",],function(ko){var window=this||(0,eval)('this'),document=window['document'],navigator=window['navigator'],jQueryInstance=window["jQuery"],JSON=window["JSON"];if(!jQueryInstance&&typeof jQuery!=="undefined"){jQueryInstance=jQuery;}
var MenuModelBinding=function(){var self=this;var boundElementDomDataKey=ko.utils.domData.nextKey();var contextSubscribable=ko.utils.createSymbolOrString('_subscribable');var contextAncestorBindingInfo=ko.utils.createSymbolOrString('_ancestorBindingInfo');var contextDataDependency=ko.utils.createSymbolOrString('_dataDependency');var bindingDoesNotRecurseIntoElementTypes={'script':true,'textarea':true,'template':true};function makeValueAccessor(value){return function(){return value;};}
function evaluateValueAccessor(valueAccessor){return valueAccessor();}
function makeAccessorsFromFunction(callback){return ko.utils.objectMap(ko.dependencyDetection.ignore(callback),function(value,key){return function(){return callback()[key];};});}
function makeBindingAccessors(bindings,context,node){if(typeof bindings==='function'){return makeAccessorsFromFunction(bindings.bind(null,context,node));}else{return ko.utils.objectMap(bindings,makeValueAccessor);}}
function getBindingsAndMakeAccessors(node,context){return makeAccessorsFromFunction(this['getBindings'].bind(this,node,context));}
function validateThatBindingIsAllowedForVirtualElements(bindingName){var validator=ko.virtualElements.allowedBindings[bindingName];if(!validator)
throw new Error("The binding '"+bindingName+"' cannot be used with virtual elements")}
function getBindingContext(viewModelOrBindingContext,extendContextCallback){return viewModelOrBindingContext&&(viewModelOrBindingContext instanceof ko.bindingContext)?viewModelOrBindingContext:new ko.bindingContext(viewModelOrBindingContext,undefined,undefined,extendContextCallback);}
function applyBindingsToDescendantsInternal(bindingContext,elementOrVirtualElement){var nextInQueue=ko.virtualElements.firstChild(elementOrVirtualElement);if(nextInQueue){var currentChild,provider=ko.bindingProvider['instance'],preprocessNode=provider['preprocessNode'];if(preprocessNode){while(currentChild=nextInQueue){nextInQueue=ko.virtualElements.nextSibling(currentChild);preprocessNode.call(provider,currentChild);}
nextInQueue=ko.virtualElements.firstChild(elementOrVirtualElement);}
while(currentChild=nextInQueue){nextInQueue=ko.virtualElements.nextSibling(currentChild);applyBindingsToNodeAndDescendantsInternal(bindingContext,currentChild);}}
ko.bindingEvent.notify(elementOrVirtualElement,ko.bindingEvent.childrenComplete);}
function applyBindingsToNodeAndDescendantsInternal(bindingContext,nodeVerified){var bindingContextForDescendants=bindingContext;var isElement=(nodeVerified.nodeType===1);if(isElement)
ko.virtualElements.normaliseVirtualElementDomStructure(nodeVerified);var shouldApplyBindings=isElement||ko.bindingProvider['instance']['nodeHasBindings'](nodeVerified);if(shouldApplyBindings)
bindingContextForDescendants=self.applyBindingsToNodeInternal(nodeVerified,null,bindingContext)['bindingContextForDescendants'];if(bindingContextForDescendants&&!bindingDoesNotRecurseIntoElementTypes[ko.utils.tagNameLower(nodeVerified)]){applyBindingsToDescendantsInternal(bindingContextForDescendants,nodeVerified);}}
function topologicalSortBindings(bindings){var result=[],bindingsConsidered={},cyclicDependencyStack=[];ko.utils.objectForEach(bindings,function pushBinding(bindingKey){if(!bindingsConsidered[bindingKey]){var binding=ko['getBindingHandler'](bindingKey);if(binding){if(binding['after']){cyclicDependencyStack.push(bindingKey);ko.utils.arrayForEach(binding['after'],function(bindingDependencyKey){if(bindings[bindingDependencyKey]){if(ko.utils.arrayIndexOf(cyclicDependencyStack,bindingDependencyKey)!==-1){throw Error("Cannot combine the following bindings, because they have a cyclic dependency: "+cyclicDependencyStack.join(", "));}else{pushBinding(bindingDependencyKey);}}});cyclicDependencyStack.length--;}
result.push({key:bindingKey,handler:binding});}
bindingsConsidered[bindingKey]=true;}});return result;}
self.applyBindings=function(viewModelOrBindingContext,rootNode,extendContextCallback){if(!jQueryInstance&&window['jQuery']){jQueryInstance=window['jQuery'];}
if(arguments.length<2){rootNode=document.body;if(!rootNode){throw Error("ko.applyBindings: could not find document.body; has the document been loaded?");}}else if(!rootNode||(rootNode.nodeType!==1&&rootNode.nodeType!==8)){throw Error("ko.applyBindings: first parameter should be your view model; second parameter should be a DOM node");}
applyBindingsToNodeAndDescendantsInternal(getBindingContext(viewModelOrBindingContext,extendContextCallback),rootNode);};self.applyBindingsToNodeInternal=function(node,sourceBindings,bindingContext){var bindingInfo=ko.utils.domData.getOrSet(node,boundElementDomDataKey,{});var alreadyBound=bindingInfo.alreadyBound;if(!sourceBindings){if(alreadyBound){}
bindingInfo.alreadyBound=true;}
if(!alreadyBound){bindingInfo.context=bindingContext;}
if(!bindingInfo.notifiedEvents){bindingInfo.notifiedEvents={};}
var bindings;if(sourceBindings&&typeof sourceBindings!=='function'){bindings=sourceBindings;}else{var provider=ko.bindingProvider['instance'],getBindings=provider['getBindingAccessors']||getBindingsAndMakeAccessors;var bindingsUpdater=ko.dependentObservable(function(){bindings=sourceBindings?sourceBindings(bindingContext,node):getBindings.call(provider,node,bindingContext);if(bindings){if(bindingContext[contextSubscribable]){bindingContext[contextSubscribable]();}
if(bindingContext[contextDataDependency]){bindingContext[contextDataDependency]();}}
return bindings;},null,{disposeWhenNodeIsRemoved:node});if(!bindings||!bindingsUpdater.isActive())
bindingsUpdater=null;}
var contextToExtend=bindingContext;var bindingHandlerThatControlsDescendantBindings;if(bindings){var getValueAccessor=bindingsUpdater?function(bindingKey){return function(){return evaluateValueAccessor(bindingsUpdater()[bindingKey]);};}:function(bindingKey){return bindings[bindingKey];};function allBindings(){return ko.utils.objectMap(bindingsUpdater?bindingsUpdater():bindings,evaluateValueAccessor);}
allBindings['get']=function(key){return bindings[key]&&evaluateValueAccessor(getValueAccessor(key));};allBindings['has']=function(key){return key in bindings;};if(ko.bindingEvent.childrenComplete in bindings){ko.bindingEvent.subscribe(node,ko.bindingEvent.childrenComplete,function(){var callback=evaluateValueAccessor(bindings[ko.bindingEvent.childrenComplete]);if(callback){var nodes=ko.virtualElements.childNodes(node);if(nodes.length){callback(nodes,ko.dataFor(nodes[0]));}}});}
if(ko.bindingEvent.descendantsComplete in bindings){contextToExtend=ko.bindingEvent.startPossiblyAsyncContentBinding(node,bindingContext);ko.bindingEvent.subscribe(node,ko.bindingEvent.descendantsComplete,function(){var callback=evaluateValueAccessor(bindings[ko.bindingEvent.descendantsComplete]);if(callback&&ko.virtualElements.firstChild(node)){callback(node);}});}
var orderedBindings=topologicalSortBindings(bindings);ko.utils.arrayForEach(orderedBindings,function(bindingKeyAndHandler){var handlerInitFn=bindingKeyAndHandler.handler["init"],handlerUpdateFn=bindingKeyAndHandler.handler["update"],bindingKey=bindingKeyAndHandler.key;if(node.nodeType===8){validateThatBindingIsAllowedForVirtualElements(bindingKey);}
try{if(typeof handlerInitFn=="function"){ko.dependencyDetection.ignore(function(){var initResult=handlerInitFn(node,getValueAccessor(bindingKey),allBindings,contextToExtend['$data'],contextToExtend);if(initResult&&initResult['controlsDescendantBindings']){if(bindingHandlerThatControlsDescendantBindings!==undefined)
throw new Error("Multiple bindings ("+bindingHandlerThatControlsDescendantBindings+" and "+bindingKey+") are trying to control descendant bindings of the same element. You cannot use these bindings together on the same element.");bindingHandlerThatControlsDescendantBindings=bindingKey;}});}
if(typeof handlerUpdateFn=="function"){ko.dependentObservable(function(){handlerUpdateFn(node,getValueAccessor(bindingKey),allBindings,contextToExtend['$data'],contextToExtend);},null,{disposeWhenNodeIsRemoved:node});}}catch(ex){ex.message="Unable to process binding \""+bindingKey+": "+bindings[bindingKey]+"\"\nMessage: "+ex.message;throw ex;}});}
var shouldBindDescendants=bindingHandlerThatControlsDescendantBindings===undefined;return{'shouldBindDescendants':shouldBindDescendants,'bindingContextForDescendants':shouldBindDescendants&&contextToExtend};};}
return MenuModelBinding;});